@*@*@ TYPESCRIPT QUESTIONS @*@*@
      ====================

1.  What is Angular.
2.  What are the challenges in modern web development.
3.  What are the problems with JS & jQuery.
4.  Why we need Angular.
5.  What is difference between Angular and Angular JS.
6.  What is difference between React and Angular.
7.  What are the Issues with Object Oriented Programming.
8.  What are the issues with JavaScript.
9.  What is Typescript.
10. Define Typescript Architecture and define its core components.
11. What is Captcha and Editor.
12. What is Package manager.
13. Which command is used to check node js version.
14. What is the command for downloading typescript and checking the typescript version.
15. Which command is used to download package.json and what the package.json contains.
16. What tsconfig.json file contains and what is the command to download it.
17. Inside typescript project public, src, index.html what it contains.



** TYPESCRIPT LANGUAGE BASICS**
   ==========================
1.  What is the command to convert typescript into javascript.
2.  What is the command to execute javascript file to get the output.



**TYPESCRIPT VARIABLES**
  ====================
3.  What is Variable.
4.  Variable comprises how many parts.
5.  How many types of variable are there in typescript.
6.  What is shadowing and hoisting.
7.  What are the differences between Let,Var and Const.



**TYPESCRIPT DATA TYPES**
  =====================
8.  What is Data types.
9.  How many types of data types are there in typecript.
10. Which operator is known as instance operator and which operator is known as invoke operator.
11. What is type inference.
12. What is the nature of primitive data types and how many primitive data types are there.
13. How many possible types of number data types values are there.
14. Which method is used to determine whether the data type is number or not.
15. What are the methods are there to convert string into number/float.
16. Which variable is required to find out the maximum and minimum range of number data type. 
17. In how many ways we can define string literals.
18. Which format of string is required for embedded data binding expression.
19. What are the string formatting and string manipulation methods are there in TS.

Note: 
let str = "A";
console.log(str.charCodeAt(0));  // 65
let str = "TypeScript";
console.log(str.slice(0, 4));
let str = "TypeScript";
console.log(str.substr(4, 6));  // "Script"
let str = "TypeScript";
console.log(str.substring(4, 10));  // "Script"
let str = "apple,banana,grape";
console.log(str.split(","));  // ["apple", "banana", "grape"]

20. Does typescript supports true is equal to 1 and false is equal to 0.
21. What is Union of types.
Ans: It means we can enable a variable to store some particular type of value.
22. What is Null and Undefined.
23. var username:string;
    console.log(username);  // It is a valid statement or invalid statement.
24. var username: string| undefined = undefined   // It is a valid statement or invalid statement.
25. What is the nature of non-primitive types.
26. how many types of non-primitive data types are there.
27. What are the differences between primitive and non-primitive data types.

Typescript Array
================
28. What is the technical definition of an Array.
29. What is overhead and complexity.
30. How an array reduces the overhead and complexity.
31. In how many ways we can Initialize and assign the memory of an array.
32. What is difference between array [] and Array().
33. What is a Tuple.
34. What is array de-structuring.
35. What type of values we can store in an Array.
Note: The values cannot be stored in an array if the array is not initialized/rendered into the memory.

Using Meta Character:
--------------------
 Ex:
 let products:string[] = [];   // Initialization 
 products[0] = "TV";
 products[1] = "Mobile";
 console.log(products.toString());
 Ex:
 let products:string[];
 products = [];      //rendering
 products[0] = "TV";
 products[1] = "Mobile";
 console.log(products.toString());

 Using Array Constructor:
-------------------------
 Ex:
 let products:string[] = new Array();
 products[0] = "TV";
 products[1] = "Mobile";
 console.log(products.toString());
 Ex:
 let products:string[];
 products = Array();
 products[0] = "Samsung TV";
 products[1] = "Mobile";
 console.log(products.toString());
* new is dynamic memory allocating operator.

Typescript Array Manipulation Methods
-------------------------------------
1. Returns a shallow copy of a portion of an array.
   let nums = [1, 2, 3, 4, 5];
   console.log(nums.slice(1, 4));  // [2, 3, 4]

2. Returns the first element that matches the condition.
   let nums = [10, 20, 30, 40];
   let result = nums.find(n => n > 25);
   console.log(result);  // 30

3. Returns all elements that match the condition.
   let nums = [10, 20, 30, 40];
   let result = nums.filter(n => n > 25);
   console.log(result);  // [30, 40]

4. Transforms every element and returns a new array.
   let nums = [1, 2, 3];
   let result = nums.map(n => n * 2);
   console.log(result);  // [2, 4, 6]

5. Adds one or more elements to the end of the array.
   let fruits = ["apple", "banana"];
   fruits.push("cherry");
   console.log(fruits);  // ["apple", "banana", "cherry"]

6. Removes the last element and returns it.
   let fruits = ["apple", "banana", "cherry"];
   let last = fruits.pop();
   console.log(last);    // "cherry"
   console.log(fruits);  // ["apple", "banana"]

7. Removes the first element and returns it.
   let fruits = ["apple", "banana", "cherry"];
   let first = fruits.shift();
   console.log(first);   // "apple"
   console.log(fruits);  // ["banana", "cherry"]

8. Adds one or more elements to the beginning of the array.
   let fruits = ["banana", "cherry"];
   fruits.unshift("apple");
   console.log(fruits);  // ["apple", "banana", "cherry"]

9. Executes a reducer function on each element, resulting in a single output value.
   let numbers = [1, 2, 3, 4, 5];
   let sum = numbers.reduce((acc, curr) => acc + curr, 0);
   console.log(sum);  // 15

10.array.splice(startIndex, deleteCount, item1?, item2?, ...)
   startIndex	The index at which to start changing the array
   deleteCount	Number of elements to remove
   item1...     (Optional) Items to insert at startIndex
i. Remove elements
   let arr = [1, 2, 3, 4, 5];
   let removed = arr.splice(1, 2);  // Remove 2 elements from index 1
   console.log(removed);  // [2, 3]
   console.log(arr);      // [1, 4, 5]
ii.Insert elements
   let arr = [1, 4, 5];
   arr.splice(1, 0, 2, 3);  // Insert 2 and 3 at index 1, delete 0
   console.log(arr);       // [1, 2, 3, 4, 5]
iii.Replace elements
   let arr = [1, 2, 3, 4, 5];
   arr.splice(2, 2, 99, 100);  // Remove 2 elements from index 2, add 99, 100
   console.log(arr);  // [1, 2, 99, 100, 5]
iv.Remove all from a point
   let arr = [1, 2, 3, 4, 5];
   arr.splice(3);  // Removes everything from index 3 onward
   console.log(arr);  // [1, 2, 3]

11.Default Behavior
   Sorts elements as strings in ascending order.
   let arr = [30, 4, 21, 100];
   arr.sort();
   console.log(arr);  // [100, 21, 30, 4] ❌ (wrong for numbers)
i. arr.sort((a, b) => a - b);  // Ascending
   console.log(arr);  // [4, 21, 30, 100]
   arr.sort((a, b) => b - a);  // Descending
   console.log(arr);  // [100, 30, 21, 4]
ii.let fruits = ["banana", "apple", "cherry"];
   fruits.sort();
   console.log(fruits);  // ["apple", "banana", "cherry"]

12.let nums = [1, 2, 3];
   nums.reverse();
   console.log(nums);  // [3, 2, 1]
i. let names = ["Zara", "John", "Alex"];
   names.sort().reverse();  // Descending alphabetical
   console.log(names);  // ["Zara", "John", "Alex"]

36. In array how readonly prevents the changes of an array.

Typescript Object
=================
37. What is Object type.
38. Which character is known as null reference character.
39. How can we define our object related information inside and outside of the object.
40. What should be the data type of the key and value.

Typescript Map
==============
41. What is Map Type.
42. What are the differences between Object and Map.
Ex: 
   const map = new Map<string, number>();
   map.set("one", 1);
   map.set("two", 2);
   for (let key of myMap.keys()) {
   console.log(key);  // "one", "two"
   }
   for (let value of myMap.values()) {
   console.log(value);  // 1, 2
   }
   console.log(map.get("one"));      // 1
   console.log(map.has("two"));      // true
   console.log(map.size);            // 2
   map.delete("one");
   for (let [k, v] of map.entries()) {
   console.log(k, v);
   }

Typescript Symbol
=================
43. What is Symbol type, It is a primitive/non-primitive data type.



**TYPESCRIPT OPERATORS**
  ====================
1.  What are the differences between == and === operator.
Ans.== checks only value but === checks the value as well as type of the value.
Ex:
   console.log(5 == '5');          // true  
   console.log(null == undefined); // true 
   console.log(0 == false);        // true  

   console.log(5 === '5');         // false	
   console.log(null === undefined);// false
   console.log(0 === false);       // false


 

**TYPESCRIPT FUNCTIONS**
  ====================
1.  What is the technical definition of Function.
2.  What is function declaration, signature and definition.
3.  How typescript functions are different from a javascript function.
4.  What is the rule of required and optional parameter.

Typescript Function Parameters
------------------------------
Note: 
i.  DEFAULT PARAMETER
    function greet(name: string, age: number = 30): void {
    console.log(`Hello ${name}, age ${age}`);
   }
    greet("Bob");  // age = 30
ii. For unlimited parameters of the same type is called as Rest Parameter.
    function sum(...numbers: number[]): number {
    return numbers.reduce((total, n) => total + n, 0);
   }
    console.log(sum(1, 2, 3, 4));  // 10
ii. Function with object parameter is known as destructing.
    function display({ name, age }: { name: string; age: number }) {
    console.log(`${name} is ${age}`);
   }
    display({ name: "Tom", age: 40 });

Typescript Anonymous Function
-----------------------------
i.  Assigned to a Variable
Ex: const add = function(a: number, b: number): number {
    return a + b;
  };
    console.log(add(2, 3)); // 5
OR 
    const multiply = (x: number, y: number): number => x * y;
    console.log(multiply(4, 5)); // 20

ii. Anonymous Function as Callback
Ex: let numbers = [1, 2, 3, 4];
    let squared = numbers.map(function(num: number): number {
    return num * num;
   });
    console.log(squared); // [1, 4, 9, 16]
OR
   let squaredArrow = numbers.map(num => num * num);

Typescript Function Return
--------------------------
i.  Returning an object
    function createUser(name: string, age: number): { name: string; age: number } {
    return { name, age };
   }
ii. Returning arrays
    function getFruits(): string[] {
    return ["apple", "banana"];
   }
iii.Return array function
    const square = (x: number): number => x * x;

Typescript Function Closure
---------------------------
* A closure is a function that remembers the variables of outer scope wven though the outer function completes its execution, it means the inner function can access outer function variables even if i call it later.
Ex: function Outer(out:string){
    return function Inner(in:string){
     console.log(`${out} : ${in}`);
   }};
   let val = Outer('Hello');
   val('World'); // Hello : World
Ex: function createCounter() {
   let count = 0;
   return function () {
    count++;
    return count;
  };
 }
   const counter = createCounter();
   console.log(counter()); // 1
   console.log(counter()); // 2
   console.log(counter()); // 3
*  Closure is used for data encapsulation and maintaining state in callbacks.

Typescript Function Recursion
-----------------------------
Ex: function factorial(n:number):number{
    if(n==0)return 1;           // The condition that stops the recursion.
    return n * factorial(n-1);  // Where the function calls itself.
   }
    console.log(factorial(5)); // Output: 120
Ex: function fibonacci(n:number):number{
    if(n<=1)return n;           // The condition that stops the recursion.
    return fibonacci(n-1) + factorial(n-2);  // Where the function calls itself.
   }
    console.log(fibonacci(6)); // Output: 8

 

**TYPESCRIPT OOPS**
  ===============  
1. Real world application development uses how many types of programming system.
2. Real world application development uses what various programming approaches.



**TYPESCRIPT CONTRACTS**
  ====================
1. What is contracts.
2. What is the use of optional rules.
3. What is the use of readonly rules inside a contract.
4. What is the rule for defining a method inside a contract.
5. What is the purpose of extending contracts.
6. What is Backward compatibility.
7. What is side by side execution.
8. Does contracts support multilevel and multiple inheritance.



**TYPESCRIPT CLASS IN OOP**
  =======================
1.  What is the technical definition of a class.
2.  What is Entity and Model.
3.  Every class contains how many parts.
4.  Every class contains how many members.
5.  Can we declare a variable as class member.
6.  Why variable is not allowed as class member.
7.  Can we have a variable in class. 
8.  Can we declare a function as class member.
9.  Can we have a function in class.
10. Why static member is used inside a class.
11. Why non-static member is used inside a class.
12. What is the difference between static and non static member inside a class.
Ex:
 class Demo {
  static s = 0;    // static property shared by all instances
  n = 0;           // instance property, unique per object

  constructor() {
    Demo.s = Demo.s + 1;  // increment shared static variable
    this.n = this.n + 1;  // increment instance variable (starts at 0)
  }

  Print() {
    console.log(`s=${Demo.s} n=${this.n}`);
  }
}
OP: s=1 n=1
    s=2 n=1
    s=3 n=1
Note:
Demo.s is a static variable → shared by all instances
this.n is an instance variable → unique to each object

13. What are the access modifiers are there in a class and define each one.
14. What is the use of property.
15. Which type of value that a property can store inside a class.
16. What is accessors and define each one.
17. What is the use of constructor.
18. What is singleton class.
19. If constructor is parameterized when to pass values into constructor.
20. In typescript can the constructor be overloaded.
21. In typescript can we have private and static constructors.
22. How the class is implemented.
23. Can we define any member additionally in a class which is not configured in contract.
24. Which type of inheritances is supported in typescript class.
25. Does it mandatory to call a base class constructor inside of a derieved class constructor.
26. Why we cannot create an object for an abstract class.
27. Static uses more or less memory.
28. What is difference between a Variable and Property.
Ans. Variable is immutable where as Property is mutable.
28. How to restrict a property from storing new value.
Ans. Through making it readonly.




**TYPESCRIPT POLYMERPHISM IN OOP**
  ==============================
1. What is polymerphism and what it technically means.
2. Can a method, function, class memory and object memory be overloaded.



**TYPESCRIPT TEMPLATES IN OOP**
  ===========================
1. What is Template.
2. How a template can be designed.



**TYPESCRIPT GENERICS IN OOP**
  ==========================
1. What is Generics in Typescript.
2. What are the things that can be generics in typescript.


**TYPESCRIPT ENUM IN OOP**
  ======================
1. What is Enum.
2. How many constants are there in enum.
3. In enum which constants have the auto implementation.
4. What is the rules for enum expression return value type.
5. What is reverse mapping in enum.


**TYPESCRIPT MODULES IN OOP**
  =========================
1. What is a Module and what it contains.
2. What are the various module system that javascript uses to handle modules.
3. If we want to change the current module system in our application then we need to go to which file.
4. NPM create one module, what is the name of that module.
5. To access one module outside of any module which keyword is required.
6. Can there multiple default members inside a module.
7. Why is the use of default member inside of a module.
8. What is the rule for importing the default member inside of another module.



**ADDITIONAL QUESTIONS FOR INTERVIEW**
  ==================================
1.  Can you use TypeScript with existing JavaScript code?
Ans: Yes, in tsconfig.json file we need to write "allowJs": true inside compilerOptions object.

2.  Explain readonly vs const in TypeScript?
Ans: const can be applied only on variables where as readonly only applies on objects, classes, interfaces.
*    const prevents reassignment of variable where as readonly prevents the modification of variable.

3.  What’s the difference between any, unknown, void, and never?
Ans: "any" refers any type i.e it temporarly disable type checking.
     "unknown" requires type checking before using the value.
     "void" means the function does not return anything.
     "never" means the function never returns anything, it is needed at the time of error checking.

4.  What is the difference between optional and readonly property.
Ans: optional refers property may or may not be present in an object where as property cannot be changed after the object is created.

5.  What is keyof, typeof, and in in TypeScript?
Ans: The keyof operator is used to get a union type of all the keys of an object type.
Ex:
interface Person {
  name: string;
  age: number;
}
type PersonKeys = keyof Person;  // "name" | "age"

*  The typeof operator is used to get the type of a value or a variable.
Ex:
const person = {
  name: 'Alice',
  age: 30,
};
type PersonType = typeof person;  // { name: string, age: number }

* type Person = {
  name: string;
  age: number;
};
type HasName = 'name' in Person;  // true
type HasEmail = 'email' in Person;  // false

6.  What is intersection types.
Ans: In TypeScript, intersection types allow you to combine multiple types into one.
UseCase: You want to add additional properties or behaviors to existing types.
         You want to combine multiple types or interfaces into one.
Ex: Combining  two types
type A = { name: string };
type B = { age: number };
type Person = A & B;
const person: Person = { name: 'Alice', age: 30 };  // valid

Ex: Combining Interface
interface Employee {
  name: string;
  role: string;
}
interface Contact {
  phone: string;
  email: string;
}
type EmployeeWithContact = Employee & Contact;
const employee: EmployeeWithContact = {
  name: 'Bob',
  role: 'Developer',
  phone: '123-456-7890',
  email: 'bob@example.com',
};

7.  What is type keyword in typescript.
Ans: The type keyword is used to define custom types or type aliases.
Ex: 
type Name = string;
type Age = number;
const name: Name = 'Alice'; // 'Alice' is of type string
const age: Age = 30;        // 30 is of type number

Ex: 
type Person = {
  name: string;
  age: number;
};
const person: Person = {
  name: 'Bob',
  age: 25
};

Ex:
type Status = 'success' | 'error' | 'pending';
const status: Status = 'success'; // valid




































@*@*@ ANGULAR QUESTIONS @*@*@
      =================

**BASIC SETUP QUESTIONS**
  =====================
1.  What is CLI.
2.  What are the commands used to check angular version, install angular, cache verify, uninstall angular and install a specific version of angular.
3.  What is the use of angular workspace what is the CLI command to download it.
4.  Where the typescript target files are stored in angular project.
5.  Inside angular workspace what is the meaning of these files,
  * tsconfig.json
  * README.md 
  * package.json 
  * package-lock.json 
  * angular.json
  * .gitignore 
  * .editorconfig 
  * node_modules 
6.  What is the command to generate a new application inside a workspace and what is the command to run a specific angular project.
7.  What is the default port number to run angular application.
6.  Inside angular project what is the meaning of these files,
  * tsconfig.app.json        
  * tsconfig.spec.json        
  * src 
  * src/app 
  * src/assets
  * favicon.ico 
  * index.html 
  * main.ts
  * styles.css
  * src/app/app.module.ts 
7.  Define angular application architecture.
8.  What is the angular application flow.
9.  What is Bootstrapping.



**ANGULAR COMPONENT**
  =================
1.  What is an angular Component.
2.  Component contains how many parts.
3.  In how many ways we can create component.
4.  In how many ways we can design a component structure.
5.  What is inline documentation.
6.  What is @Component().
7.  What is a directive.
8.  What is the use of selector inside a component.
9.  Every component must be registered in which section of the app.module.ts file.
10. The main component we need to declate in which section of app.module.ts file.
11. index.html should have which component.
12. After installing bootstrap for our project we need to import it in which file of angular application.
13. What is the difference between code behind technique and inline documentation for designing a component structure.
14. In code behind technique and inline documentation which keyword is used to import html and css files.
15. What is Scaffolding.
16. What is the CLI command to generate a new component.



**ANGULAR DATA BINDING**
  ====================
1.  What is Data binding.
2.  How javascript and jQuery handles data binding.
3.  For data binding angular implicitely uses which frameworks.
4.  What is MVC and define its architecture.
5.  What are the types of data binding.
6.  What is one way data binding.
7.  What are the various binding technique is there in one way data binding.
8.  What is interpolation.
9.  What is property binding.
10. What is two way data binding.
11. What is ngModel and it is available in which module, to use ngModule in which section what we need to use.
12. ngModel uses which binding technique and why.
13. In MVVM design pattern what is the use of model.
14. In angular how many types of specification are there for services on Web and explain each one.
15. Javascript provides which method to fetch the data from api.



**ANGULAR DIRECTIVES**
  ==================
1.  What is a Directive.
2.  In how many ways a directive can be used.
3.  How many types of directives are there in Angular.
4.  What is component directive.
5.  What is the use of structural directive.
6.  What are the structural directives in angular.
7.  What is the use of ngIf.
8.  What is the rule to use structural directive in application.
9.  What is the syntax for ngIf with alternative block.
10. What is Content projection.
11. What is @ViewChild().
12. What is the synatx for @ViewChild().
13. What is the issue in content projection.
Ans. Slow in rendering, 
14. Why ngFor is used.
15. Does ngFor uses for..in.
16. li  *ngFor="var item of collection">
    Can we use let here, if Yes/No then why.
17. What are ngFor properties are there in angular and explain each one.
18. What is the use of Attribute directive.
19. What are the types of Attribute directive.
20. What is the use of ngClass.
21. CSS class is applied to an element in how many ways and explain each way of applying.
22. What is the use of ngStyle and what is style binding.



**ANGULAR EVENT BINDING**
  =====================
1.  What is the technical definition of Event Binding.
2.  What is the job of sender and subscriber.
3.  Angular uses which design pattern.
4.  Why angular can't use JavaScript events directly.
5.  What are the events are there in Angular.
6.  (click)="InsertClick()"  here what is click and InsertClick() calles as.
7.  What is the default argument of all event handler.
8.  Angular event handlers use how many arguments.
9.  When to use keypress and when to use keyup, keydown.
10. What is the use of custom event.
11. How the data is sent from parent component to child component.
12. What is @Input().
13. Parent component uses which techique to send data to child component.
14. How the data is sent from child component to parent component.
15. Why child component uses the custom events.



**ANGULAR COMPONENT LIFE-CYCLE HOOKS**
  ==================================
1.  Define the angular application flow.
2.  What is Angular Life cycle phase.
3.  What is Angular Life cycle hook.
4.  What is component life cycle.
5.  When a component will be loaded and when it will be destroyed.
6.  What are the various lifecycle hooks are there, explain each one.
7.  When the code inside ngOnChanges() executes.
8.  Changes detected in ngOnChanges() is managed by which object and this object provides how many algorithm.
9.  When ngOnInit() will be executes.
10. constructor and ngOnInit() which one is executes 1st.
11. What is the order of execution of all life cycle hooks.
12. When ngDoCheck() runs.
13. When exactly does Angular run change detection.
Ans. When @Input() values change, On user interactions (clicks, typing, etc.),On timer events (setTimeout, setInterval),On HTTP response
14. 






	












  

























